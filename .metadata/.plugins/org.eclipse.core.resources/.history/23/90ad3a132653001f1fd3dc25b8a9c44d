package com.techlabs.app.service;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.techlabs.app.entity.Course;
import com.techlabs.app.entity.Student;
import com.techlabs.app.repository.CourseRepository;
import com.techlabs.app.repository.StudentRepository;

import jakarta.transaction.Transactional;

@Service
public class StudentCourseServiceImpl implements StudentCourseService{

	
	private StudentRepository studentRepository;
	private CourseRepository courseRepository;
	
	
	
	public StudentCourseServiceImpl(StudentRepository studentRepository, CourseRepository courseRepository) {
		super();
		this.studentRepository = studentRepository;
		this.courseRepository = courseRepository;
	}

	@Override
	public Student saveStudent(Student student) {
		return studentRepository.save(student);
	}

	@Override
	public List<Student> getAllStudents() {
		return studentRepository.findAll();
	}

	@Override
	public Student getStudentById(int id) {
		return studentRepository.findById(id);
	}

	@Override
	public void deleteStudent(int id) {
		studentRepository.deleteById(id);
		
	}

	@Override
	public Course saveCourse(Course course) {
		return courseRepository.save(course);
	}

	@Override
	public List<Course> getAllCourses() {
		return courseRepository.findAll();
	}

	@Override
	public Optional<Course> getCourseById(int id) {
		return courseRepository.findById(id);
	}

	@Override
	public void deleteCourse(Integer id) {
		courseRepository.deleteById(id);
	}

	@Override
	@Transactional

	public Student addStudentToCourse(int studentId, int courseId) {
		
		Student student=studentRepository.findById(studentId);
		Optional<Course> course=courseRepository.findById(courseId);
		 if (student.isPresent() && course.isPresent()) {
	            Student student1 = student.get();
	            Course course1 = course.get();
	            student.getCourses().add(course);
	            return studentRepository.save(student);
	        }
	        return null;
	}

	@Override
	@Transactional
	public Student removeStudentFromCourse(int studentId, int courseId) {
		Optional<Student> studentOptional = studentRepository.findById(studentId);
        Optional<Course> courseOptional = courseRepository.findById(courseId);

        if (studentOptional.isPresent() && courseOptional.isPresent()) {
            Student student = studentOptional.get();
            Course course = courseOptional.get();
            student.getCourses().remove(course);
            return studentRepository.save(student);
        }
        return null;
	}

}
