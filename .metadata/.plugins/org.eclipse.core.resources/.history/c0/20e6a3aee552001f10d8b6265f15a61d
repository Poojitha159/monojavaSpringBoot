package com.techlabs.app.controller;

import java.util.List;

import org.springframework.data.crossstore.ChangeSetPersister.NotFoundException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.techlabs.app.dto.CommentDTO;

import com.techlabs.app.repository.CommentRepository;
import com.techlabs.app.service.BlogService;
import com.techlabs.app.service.BlogServiceImpl;
import com.techlabs.app.service.CommentService;
import com.techlabs.app.service.CommentServiceImpl;

import io.swagger.v3.oas.annotations.parameters.RequestBody;


@RestController
@RequestMapping("/api/comments")
public class CommentController {

	private final BlogService blogService;
	private final CommentService commentService;
 private CommentRepository commentRepository;
	public CommentController(BlogServiceImpl blogService, CommentServiceImpl commentService) {
		this.blogService = blogService;
		this.commentService = commentService;
	}
    @GetMapping
    public ResponseEntity<List<CommentDTO>> getAllComments() throws NotFoundException {
    	List<CommentDTO> comments = commentService.getAllComments();
		return new ResponseEntity<>(comments, HttpStatus.OK);

    }

    
    @GetMapping("/byBlogId/{id}")
	public ResponseEntity<List<CommentDTO>> getCommentByBlogId(@PathVariable(name = "id") int id) throws NotFoundException {
		List<CommentDTO> comments = commentService.getCommentByBlogId(id);
		return new ResponseEntity<>(comments, HttpStatus.OK);
	}
    
    
    @GetMapping("/{id}")
    public ResponseEntity<CommentDTO> getCommentById1(@PathVariable int id) {
    	CommentDTO blog = commentService.getCommentById(id);
        return new ResponseEntity<>(blog, HttpStatus.OK);
        
       /* List<Comment> all = commentRepository.getCommentById(id);
		return getList(all);*/
    }
    
 
    @PostMapping()
    public ResponseEntity<CommentDTO> createComment(@RequestBody CommentDTO commentDTO) {
        System.out.println(commentDTO.getDescription());
        CommentDTO createdComment = commentService.addComment(commentDTO);
        return new ResponseEntity<>(createdComment, HttpStatus.CREATED);
    }


    @PutMapping("/{id}")
    public CommentDTO updateComment(@PathVariable int id, @RequestBody CommentDTO commentDTO) {
        return commentService.updateComment(id, commentDTO);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteComment(@PathVariable int id) {
        commentService.deleteComment(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}