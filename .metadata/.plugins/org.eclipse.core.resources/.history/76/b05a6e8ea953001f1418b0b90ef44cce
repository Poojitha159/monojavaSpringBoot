package com.techlabs.app.service;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.techlabs.app.dto.CourseDTO;
import com.techlabs.app.dto.StudentDTO;
import com.techlabs.app.entity.Course;
import com.techlabs.app.entity.Student;
import com.techlabs.app.repository.CourseRepository;
import com.techlabs.app.repository.StudentRepository;

import jakarta.transaction.Transactional;

@Service
public class StudentCourseServiceImpl implements StudentCourseService{

	
	private StudentRepository studentRepository;
	private CourseRepository courseRepository;
	
	
	
	public StudentCourseServiceImpl(StudentRepository studentRepository, CourseRepository courseRepository) {
		super();
		this.studentRepository = studentRepository;
		this.courseRepository = courseRepository;
	}

	@Override
	public StudentDTO saveStudent(StudentDTO student) {
		return studentRepository.save(student);
	}

	@Override
	public List<StudentDTO> getAllStudents() {
		return studentRepository.findAll();
	}

	@Override
	public StudentDTO getStudentById(int id) {
		return studentRepository.findById(id);
	}

	@Override
	public void deleteStudent(int id) {
		studentRepository.deleteById(id);
		
	}

	@Override
	public CourseDTO saveCourse(CourseDTO course) {
		return courseRepository.save(course);
	}

	@Override
	public List<CourseDTO> getAllCourses() {
		return courseRepository.findAll();
	}

	@Override
	public Optional<CourseDTO> getCourseById(int id) {
		return courseRepository.findById(id);
	}

	@Override
	public void deleteCourse(Integer id) {
		courseRepository.deleteById(id);
	}

	@Override
	@Transactional

	public StudentDTO addStudentToCourse(int studentId, int courseId) {
		
		StudentDTO student = getStudentById(studentId);
	    Course course = courseRepository.findById(courseId).orElseThrow(() -> new RuntimeException("Course not found"));
	    student.getCourses().add(course);
	    return studentRepository.save(student);
	}

	@Override
	@Transactional
	public StudentDTO removeStudentFromCourse(int studentId, int courseId) {
		StudentDTO student = getStudentById(studentId);
	    CourseDTO course = courseRepository.findById(courseId).orElseThrow(() -> new RuntimeException("Course not found"));
	    student.getCourses().remove(course);
	    return studentRepository.save(student);
	}
	
	private CourseDTO convertToDTO(Course course) {
        CourseDTO courseDTO = new CourseDTO();
        courseDTO.setId(course.getId());
        courseDTO.setName(course.getName());
        return courseDTO;
    }

    private Course convertToEntity(CourseDTO courseDTO) {
        Course course = new Course();
        course.setId(courseDTO.getId());
        course.setName(courseDTO.getName());
        return course;
    }


}
