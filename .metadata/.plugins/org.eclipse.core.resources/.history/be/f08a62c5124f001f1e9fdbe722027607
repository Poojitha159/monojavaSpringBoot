package com.techlabs.app.service;


import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.techlabs.app.dto.EmployeeDTO;
import com.techlabs.app.dto.EmployeeResponseDTO;
import com.techlabs.app.entity.Employee;
import com.techlabs.app.exception.EmployeeNotFoundException;
import com.techlabs.app.exception.ResourceNotFoundException;
import com.techlabs.app.repository.EmployeeRepository;
import com.techlabs.app.util.PagedResponse;

import jakarta.validation.Valid;

@Service
public class EmployeeServiceImpl implements EmployeeService {

  @Autowired
  private EmployeeRepository employeeRepository;
  
  public EmployeeResponseDTO saveAndUpdate(@Valid EmployeeDTO employeeDTO) {
	    Employee employee = convertEmployeeDtoToObject(employeeDTO);
	    Employee savedEmployee = employeeRepository.save(employee);
	    return convertEmployeeToResponseDTO(savedEmployee);
	  }

	  private Employee convertEmployeeDtoToObject(EmployeeDTO employeeDTO) {
	    Employee employee = new Employee();
	    if (employeeDTO.getId() != 0) {
	      employee.setId(employeeDTO.getId());
	    }
	    employee.setName(employeeDTO.getName());
	    employee.setEmail(employeeDTO.getEmail());
	    employee.setDesignation(employeeDTO.getDesignation());
	    employee.setSalary(employeeDTO.getSalary());
	    employee.setActive(employeeDTO.isActive());
	    return employee;
	  }

	  @Override
	  public EmployeeResponseDTO convertEmployeeToResponseDTO(Employee employee) {
	    EmployeeResponseDTO employeeDTO = new EmployeeResponseDTO();
	    employeeDTO.setName(employee.getName());
	    employeeDTO.setEmail(employee.getEmail());
	    employeeDTO.setDesignation(employee.getDesignation());
	    employeeDTO.setActive(employee.isActive());
	    return employeeDTO;
	  }

  @Override
  public PagedResponse<EmployeeResponseDTO> getAllEmployees(int page,int size) {
	  
	  Pageable pegeable= PageRequest.of(page, size);
	  Page<Employee> page1=employeeRepository.findAll(pegeable);
	  List<Employee> employees=page1.getContent();
	//  List<EmployeeResponseDTO> responseList=getResponseList(employees);
	  List<EmployeeResponseDTO> list=page1.getContent().stream().map(this::convertEmployeeToResponseDTO).collect(Collectors.toList());
	  return new PagedResponse<>(list, page1.getNumber(),page1.getSize(),page1.getTotalElements(),page1.getTotalPages(),page1.isLast()); 
	  //return new PagedResponse<EmployeeResponseDTO>(( ((PagedResponse<EmployeeResponseDTO>) responseList).getContent(),
			//  page1.getNumber(),page1.getSize(),page1.getTotalElements(),page1.getTotalPages(),page1.isLast()); 
	  //List<Employee> employees=page1.getContent();
	  //if(employees.isEmpty()) {
		//  throw new EmployeeNotFoundException("no emploee found add smeone");
		  
//	  }
    //return (PagedResponse<Employee>) convertEmployeeToResponseDTO((Employee) employees);
}

  private List<EmployeeResponseDTO> getResponseList(List<Employee> employees) {
	// TODO Auto-generated method stub
	return null;
}

@Override
  public Employee saveAndUpdate(Employee employee) {
    return employeeRepository.save(employee);
  }

  @Override
  public EmployeeResponseDTO getEmployeeById(int id) {
	  
	  Employee employee = employeeRepository.findById(id)
              .orElseThrow(() -> new ResourceNotFoundException("Employee not found with id " + id));
      return convertEmployeeToResponseDTO(employee);
	  
  //  return employeeRepository.findById(id).orElse(null);
  }

  @Override
  public void deleteEmployee(Employee employee) {
	  
	  
    employeeRepository.delete(employee);
  }

  @Override
  public List<Employee> findEmployeeByName(String name) {
    return employeeRepository.findByName(name);
  }

  @Override
  public Employee findEmployeeByEmail(String email) {
    return employeeRepository.findByEmail(email);
  }

  @Override
  public List<Employee> findAllActiveEmployees() {
    return employeeRepository.findByActive(true);
  }

  @Override
  public List<Employee> findEmployeesByNameStartingWith(String prefix) {
    return employeeRepository.findByNameStartingWith(prefix);
  }

  @Override
  public List<Employee> findEmployeesBySalaryGreaterThanAndDesignation(double salary, String designation) {
    return employeeRepository.findBySalaryGreaterThanAndDesignation(salary, designation);
  }

  @Override
  public List<Employee> findEmployeesBySalaryBetween(double startSalary, double endSalary) {
    return employeeRepository.findBySalaryBetween(startSalary, endSalary);
  }

  @Override
  public List<Employee> findActiveEmployeesWithSalaryGreaterThan(double salary) {
    return employeeRepository.findByActiveAndSalaryGreaterThan(true, salary);
  }

  @Override
  public long countActiveEmployees() {
    return employeeRepository.countByActive(true);
  }

@Override
public long countEmployeesByDesignation(String designation) {
	// TODO Auto-generated method stub
	return 0;
}

@Override
public void deleteEmployee(EmployeeResponseDTO employee) {
	// TODO Auto-generated method stub
	
}

@Override
public PagedResponse<Employee> getAllEmployees() {
	// TODO Auto-generated method stub
	return null;
}


  
  
}













































/*package com.techlabs.app.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.techlabs.app.entity.Employee;

import com.techlabs.app.repository.EmployeeRepository;

@Service
public class EmployeeServiceImpl implements EmployeeService {
	@Autowired
	private EmployeeRepository employeeRepository;

	public EmployeeServiceImpl(EmployeeRepository employeeRepository) {
		super();
		this.employeeRepository = employeeRepository;
	}

	public EmployeeRepository getEmployeeRepository() {
		return employeeRepository;
	}

	public void setEmployeeRepository(EmployeeRepository employeeRepository) {
		this.employeeRepository = employeeRepository;
	}

	@Override
	public List<Employee> getAllEmployees() {
		
		return employeeRepository.findAll();
	}

	@Override
	public Employee getEmployeeById(int id) {
		
		Optional<Employee> byId = employeeRepository.findById(id);
		if(byId.isPresent()) return byId.get();
		return null;
	}

	@Override
	public Employee saveAndUpdate(Employee employee) {
		
		return  employeeRepository.save(employee);
	}

	@Override
	public void deleteStudent(Employee employee) {
		employeeRepository.delete(employee);
	}

	@Override
	public List<Employee> findEmployeeByName(String name) {
		
		return employeeRepository.findByName(name);
	}

	@Override
	public List<Employee>  findEmployeeByEmail(String email) {
		
		return employeeRepository.findByEmail(email);
	}

	@Override
	public List<Employee> findEmployeeByActive()) {
		
		return employeeRepository.findByActive(true);
	}

	@Override
	public List<Employee> findByNameStartingWith(String prefix) {
		return employeeRepository.findByNameStartingWith(prefix);
	}

	
	
	@Override
	public List<Employee> findByActiveAndSalaryGreaterThan(boolean b, double salary) {
		
		return employeeRepository.findByActiveAndSalaryGreaterThan(true,salary);
	}

	@Override
	public int countActiveEmployees() {
		return employeeRepository.countByActive(true);
	}

	

	@Override
	public List<Employee> getEmployeesGreaterThanAndDesignation(double salary, String designation) {
		
		return employeeRepository.findBySalaryGreaterThanAndDesignation(salary,designation);
	}

	@Override
	public List<Employee> getEmployeeSalaryBetween(Double startSalary, Double endSalary) {
		return employeeRepository.findBySalaryBetween(startSalary, endSalary);
	}

	
	@Override
	public int getEmployeeCountAndDesignation(String designation) {
		return employeeRepository.countByDesignation( designation);
	}	
}*/
