package com.techlabs.app.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.techlabs.app.dto.CommentDTO;

import com.techlabs.app.entity.Comment;
import com.techlabs.app.exception.CommentNotFoundException;
import com.techlabs.app.exception.ResourceNotFoundException;
import com.techlabs.app.repository.CommentRepository;

@Service

public class CommentServiceImpl implements CommentService{
	
	private CommentRepository commentRepository;

	public CommentServiceImpl(CommentRepository commentRepository) {
		super();
		this.commentRepository = commentRepository;
	}

	@Override
	public List<CommentDTO> getAllComments() {
		return commentRepository.findAll()
        		.stream()
        		.map(this::convertToDTO)
        		.collect(Collectors.toList());
		
	}

	@Override
	public CommentDTO getCommentById(int id) {
		Comment comment=commentRepository.findById(id)
		.orElseThrow(() -> new CommentNotFoundException("Comment not found with id " + id));
        return convertToDTO(comment);
		
	}

	

	@Override
    public CommentDTO addComment(CommentDTO commentDTO) {
        Comment comment = new Comment();
        comment.setDescription(commentDTO.getDescription());
        Comment savedComment = commentRepository.save(comment);
        return convertToDTO(savedComment);
    }
	@Override
    public CommentDTO updateComment(int id, CommentDTO commentDTO) {
        Comment comment = commentRepository.findById(id)
                .orElseThrow(() -> new CommentNotFoundException("Comment not found with id: " + id));
        comment.setDescription(commentDTO.getDescription());
        Comment updatedComment = commentRepository.save(comment);
        return convertToDTO(updatedComment);
    }
	@Override
    public void deleteComment(int id) {
        Comment comment = commentRepository.findById(id)
                .orElseThrow(() -> new CommentNotFoundException("Comment not found with id: " + id));
        commentRepository.delete(comment);
    }


	private CommentDTO convertToDTO(Comment comment ) {
		CommentDTO commentDTO = new CommentDTO();
       
		commentDTO.setId(comment.getId());
		commentDTO.setDescription(comment.getDescription());
		commentDTO.setBlogId(comment.getBlog().getId());
       // if(comment.getBlog()!=null) {
        //	commentDTO.setBlogId(comment.getBlog().getId());
        //}
        
        return commentDTO;
    }

    
}
